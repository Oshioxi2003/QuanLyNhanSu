#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAO
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;


    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "ManagementHRM")]
    public partial class ManagementHRMDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertAccount(Account instance);
        partial void UpdateAccount(Account instance);
        partial void DeleteAccount(Account instance);
        partial void InsertTimekeeping(Timekeeping instance);
        partial void UpdateTimekeeping(Timekeeping instance);
        partial void DeleteTimekeeping(Timekeeping instance);
        partial void InsertContract(Contract instance);
        partial void UpdateContract(Contract instance);
        partial void DeleteContract(Contract instance);
        partial void InsertDepartment(Department instance);
        partial void UpdateDepartment(Department instance);
        partial void DeleteDepartment(Department instance);
        partial void InsertEnglishLevel(EnglishLevel instance);
        partial void UpdateEnglishLevel(EnglishLevel instance);
        partial void DeleteEnglishLevel(EnglishLevel instance);
        partial void InsertInsurance(Insurance instance);
        partial void UpdateInsurance(Insurance instance);
        partial void DeleteInsurance(Insurance instance);
        partial void InsertITLevel(ITLevel instance);
        partial void UpdateITLevel(ITLevel instance);
        partial void DeleteITLevel(ITLevel instance);
        partial void InsertLevel(Level instance);
        partial void UpdateLevel(Level instance);
        partial void DeleteLevel(Level instance);
        partial void InsertPosition(Position instance);
        partial void UpdatePosition(Position instance);
        partial void DeletePosition(Position instance);
        partial void InsertPunish(Punish instance);
        partial void UpdatePunish(Punish instance);
        partial void DeletePunish(Punish instance);
        partial void InsertRegulationPunish(RegulationPunish instance);
        partial void UpdateRegulationPunish(RegulationPunish instance);
        partial void DeleteRegulationPunish(RegulationPunish instance);
        partial void InsertRegulationReward(RegulationReward instance);
        partial void UpdateRegulationReward(RegulationReward instance);
        partial void DeleteRegulationReward(RegulationReward instance);
        partial void InsertReward(Reward instance);
        partial void UpdateReward(Reward instance);
        partial void DeleteReward(Reward instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);
        partial void InsertSalary(Salary instance);
        partial void UpdateSalary(Salary instance);
        partial void DeleteSalary(Salary instance);
        partial void InsertStaff(Staff instance);
        partial void UpdateStaff(Staff instance);
        partial void DeleteStaff(Staff instance);
        #endregion

        public ManagementHRMDataContext() :
                base(global::DAO.Properties.Settings.Default.ManagementHRMConnectionString, mappingSource)
        {
            OnCreated();
        }

        public ManagementHRMDataContext(string connection) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public ManagementHRMDataContext(System.Data.IDbConnection connection) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public ManagementHRMDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public ManagementHRMDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<Account> Accounts
        {
            get
            {
                return this.GetTable<Account>();
            }
        }

        public System.Data.Linq.Table<Timekeeping> Timekeepings
        {
            get
            {
                return this.GetTable<Timekeeping>();
            }
        }

        public System.Data.Linq.Table<Contract> Contracts
        {
            get
            {
                return this.GetTable<Contract>();
            }
        }

        public System.Data.Linq.Table<Department> Departments
        {
            get
            {
                return this.GetTable<Department>();
            }
        }

        public System.Data.Linq.Table<EnglishLevel> EnglishLevels
        {
            get
            {
                return this.GetTable<EnglishLevel>();
            }
        }

        public System.Data.Linq.Table<Insurance> Insurances
        {
            get
            {
                return this.GetTable<Insurance>();
            }
        }

        public System.Data.Linq.Table<ITLevel> ITLevels
        {
            get
            {
                return this.GetTable<ITLevel>();
            }
        }

        public System.Data.Linq.Table<Level> Levels
        {
            get
            {
                return this.GetTable<Level>();
            }
        }

        public System.Data.Linq.Table<Position> Positions
        {
            get
            {
                return this.GetTable<Position>();
            }
        }

        public System.Data.Linq.Table<Punish> Punishes
        {
            get
            {
                return this.GetTable<Punish>();
            }
        }

        public System.Data.Linq.Table<RegulationPunish> RegulationPunishes
        {
            get
            {
                return this.GetTable<RegulationPunish>();
            }
        }

        public System.Data.Linq.Table<RegulationReward> RegulationRewards
        {
            get
            {
                return this.GetTable<RegulationReward>();
            }
        }

        public System.Data.Linq.Table<Reward> Rewards
        {
            get
            {
                return this.GetTable<Reward>();
            }
        }

        public System.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }

        public System.Data.Linq.Table<Salary> Salaries
        {
            get
            {
                return this.GetTable<Salary>();
            }
        }

        public System.Data.Linq.Table<Staff> Staffs
        {
            get
            {
                return this.GetTable<Staff>();
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Account")]
    public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _username;

        private string _password;

        private System.Nullable<int> _roleId;

        private System.Nullable<int> _staffId;

        private EntityRef<Role> _Role;

        private EntityRef<Staff> _Staff;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnusernameChanging(string value);
        partial void OnusernameChanged();
        partial void OnpasswordChanging(string value);
        partial void OnpasswordChanged();
        partial void OnroleIdChanging(System.Nullable<int> value);
        partial void OnroleIdChanged();
        partial void OnstaffIdChanging(System.Nullable<int> value);
        partial void OnstaffIdChanged();
        #endregion

        public Account()
        {
            this._Role = default(EntityRef<Role>);
            this._Staff = default(EntityRef<Staff>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_username", DbType = "VarChar(50)")]
        public string username
        {
            get
            {
                return this._username;
            }
            set
            {
                if ((this._username != value))
                {
                    this.OnusernameChanging(value);
                    this.SendPropertyChanging();
                    this._username = value;
                    this.SendPropertyChanged("username");
                    this.OnusernameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_password", DbType = "VarChar(500)")]
        public string password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnpasswordChanging(value);
                    this.SendPropertyChanging();
                    this._password = value;
                    this.SendPropertyChanged("password");
                    this.OnpasswordChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_roleId", DbType = "Int")]
        public System.Nullable<int> roleId
        {
            get
            {
                return this._roleId;
            }
            set
            {
                if ((this._roleId != value))
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnroleIdChanging(value);
                    this.SendPropertyChanging();
                    this._roleId = value;
                    this.SendPropertyChanged("roleId");
                    this.OnroleIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_staffId", DbType = "Int")]
        public System.Nullable<int> staffId
        {
            get
            {
                return this._staffId;
            }
            set
            {
                if ((this._staffId != value))
                {
                    if (this._Staff.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnstaffIdChanging(value);
                    this.SendPropertyChanging();
                    this._staffId = value;
                    this.SendPropertyChanged("staffId");
                    this.OnstaffIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Role_Account", Storage = "_Role", ThisKey = "roleId", OtherKey = "id", IsForeignKey = true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if (((previousValue != value)
                            || (this._Role.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Role.Entity = null;
                        previousValue.Accounts.Remove(this);
                    }
                    this._Role.Entity = value;
                    if ((value != null))
                    {
                        value.Accounts.Add(this);
                        this._roleId = value.id;
                    }
                    else
                    {
                        this._roleId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Staff_Account", Storage = "_Staff", ThisKey = "staffId", OtherKey = "id", IsForeignKey = true)]
        public Staff Staff
        {
            get
            {
                return this._Staff.Entity;
            }
            set
            {
                Staff previousValue = this._Staff.Entity;
                if (((previousValue != value)
                            || (this._Staff.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Staff.Entity = null;
                        previousValue.Accounts.Remove(this);
                    }
                    this._Staff.Entity = value;
                    if ((value != null))
                    {
                        value.Accounts.Add(this);
                        this._staffId = value.id;
                    }
                    else
                    {
                        this._staffId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Staff");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Timekeeping")]
    public partial class Timekeeping : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private System.Nullable<int> _staffId;

        private System.Nullable<System.DateTime> _createDate;

        private System.Nullable<bool> _status;

        private System.Nullable<int> _departmentId;

        private EntityRef<Department> _Department;

        private EntityRef<Staff> _Staff;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnstaffIdChanging(System.Nullable<int> value);
        partial void OnstaffIdChanged();
        partial void OncreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OncreateDateChanged();
        partial void OnstatusChanging(System.Nullable<bool> value);
        partial void OnstatusChanged();
        partial void OndepartmentIdChanging(System.Nullable<int> value);
        partial void OndepartmentIdChanged();
        #endregion

        public Timekeeping()
        {
            this._Department = default(EntityRef<Department>);
            this._Staff = default(EntityRef<Staff>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_staffId", DbType = "Int")]
        public System.Nullable<int> staffId
        {
            get
            {
                return this._staffId;
            }
            set
            {
                if ((this._staffId != value))
                {
                    if (this._Staff.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnstaffIdChanging(value);
                    this.SendPropertyChanging();
                    this._staffId = value;
                    this.SendPropertyChanged("staffId");
                    this.OnstaffIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_createDate", DbType = "Date")]
        public System.Nullable<System.DateTime> createDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                if ((this._createDate != value))
                {
                    this.OncreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._createDate = value;
                    this.SendPropertyChanged("createDate");
                    this.OncreateDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_status", DbType = "Bit")]
        public System.Nullable<bool> status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnstatusChanging(value);
                    this.SendPropertyChanging();
                    this._status = value;
                    this.SendPropertyChanged("status");
                    this.OnstatusChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_departmentId", DbType = "Int")]
        public System.Nullable<int> departmentId
        {
            get
            {
                return this._departmentId;
            }
            set
            {
                if ((this._departmentId != value))
                {
                    if (this._Department.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OndepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._departmentId = value;
                    this.SendPropertyChanged("departmentId");
                    this.OndepartmentIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Department_Timekeeping", Storage = "_Department", ThisKey = "departmentId", OtherKey = "id", IsForeignKey = true)]
        public Department Department
        {
            get
            {
                return this._Department.Entity;
            }
            set
            {
                Department previousValue = this._Department.Entity;
                if (((previousValue != value)
                            || (this._Department.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Department.Entity = null;
                        previousValue.Timekeepings.Remove(this);
                    }
                    this._Department.Entity = value;
                    if ((value != null))
                    {
                        value.Timekeepings.Add(this);
                        this._departmentId = value.id;
                    }
                    else
                    {
                        this._departmentId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Department");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Staff_Timekeeping", Storage = "_Staff", ThisKey = "staffId", OtherKey = "id", IsForeignKey = true)]
        public Staff Staff
        {
            get
            {
                return this._Staff.Entity;
            }
            set
            {
                Staff previousValue = this._Staff.Entity;
                if (((previousValue != value)
                            || (this._Staff.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Staff.Entity = null;
                        previousValue.Timekeepings.Remove(this);
                    }
                    this._Staff.Entity = value;
                    if ((value != null))
                    {
                        value.Timekeepings.Add(this);
                        this._staffId = value.id;
                    }
                    else
                    {
                        this._staffId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Staff");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Contract")]
    public partial class Contract : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private System.Nullable<double> _basicSalary;

        private System.Nullable<double> _allowance;

        private EntitySet<Staff> _Staffs;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void OnbasicSalaryChanging(System.Nullable<double> value);
        partial void OnbasicSalaryChanged();
        partial void OnallowanceChanging(System.Nullable<double> value);
        partial void OnallowanceChanged();
        #endregion

        public Contract()
        {
            this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(100)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_basicSalary", DbType = "Float")]
        public System.Nullable<double> basicSalary
        {
            get
            {
                return this._basicSalary;
            }
            set
            {
                if ((this._basicSalary != value))
                {
                    this.OnbasicSalaryChanging(value);
                    this.SendPropertyChanging();
                    this._basicSalary = value;
                    this.SendPropertyChanged("basicSalary");
                    this.OnbasicSalaryChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_allowance", DbType = "Float")]
        public System.Nullable<double> allowance
        {
            get
            {
                return this._allowance;
            }
            set
            {
                if ((this._allowance != value))
                {
                    this.OnallowanceChanging(value);
                    this.SendPropertyChanging();
                    this._allowance = value;
                    this.SendPropertyChanged("allowance");
                    this.OnallowanceChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Contract_Staff", Storage = "_Staffs", ThisKey = "id", OtherKey = "contractId")]
        public EntitySet<Staff> Staffs
        {
            get
            {
                return this._Staffs;
            }
            set
            {
                this._Staffs.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Staffs(Staff entity)
        {
            this.SendPropertyChanging();
            entity.Contract = this;
        }

        private void detach_Staffs(Staff entity)
        {
            this.SendPropertyChanging();
            entity.Contract = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Department")]
    public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private EntitySet<Timekeeping> _Timekeepings;

        private EntitySet<Salary> _Salaries;

        private EntitySet<Staff> _Staffs;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        #endregion

        public Department()
        {
            this._Timekeepings = new EntitySet<Timekeeping>(new Action<Timekeeping>(this.attach_Timekeepings), new Action<Timekeeping>(this.detach_Timekeepings));
            this._Salaries = new EntitySet<Salary>(new Action<Salary>(this.attach_Salaries), new Action<Salary>(this.detach_Salaries));
            this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(100)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Department_Timekeeping", Storage = "_Timekeepings", ThisKey = "id", OtherKey = "departmentId")]
        public EntitySet<Timekeeping> Timekeepings
        {
            get
            {
                return this._Timekeepings;
            }
            set
            {
                this._Timekeepings.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Department_Salary", Storage = "_Salaries", ThisKey = "id", OtherKey = "departmentId")]
        public EntitySet<Salary> Salaries
        {
            get
            {
                return this._Salaries;
            }
            set
            {
                this._Salaries.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Department_Staff", Storage = "_Staffs", ThisKey = "id", OtherKey = "departmentId")]
        public EntitySet<Staff> Staffs
        {
            get
            {
                return this._Staffs;
            }
            set
            {
                this._Staffs.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Timekeepings(Timekeeping entity)
        {
            this.SendPropertyChanging();
            entity.Department = this;
        }

        private void detach_Timekeepings(Timekeeping entity)
        {
            this.SendPropertyChanging();
            entity.Department = null;
        }

        private void attach_Salaries(Salary entity)
        {
            this.SendPropertyChanging();
            entity.Department = this;
        }

        private void detach_Salaries(Salary entity)
        {
            this.SendPropertyChanging();
            entity.Department = null;
        }

        private void attach_Staffs(Staff entity)
        {
            this.SendPropertyChanging();
            entity.Department = this;
        }

        private void detach_Staffs(Staff entity)
        {
            this.SendPropertyChanging();
            entity.Department = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.EnglishLevel")]
    public partial class EnglishLevel : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private EntitySet<Staff> _Staffs;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        #endregion

        public EnglishLevel()
        {
            this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(50)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "EnglishLevel_Staff", Storage = "_Staffs", ThisKey = "id", OtherKey = "englishLevelId")]
        public EntitySet<Staff> Staffs
        {
            get
            {
                return this._Staffs;
            }
            set
            {
                this._Staffs.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Staffs(Staff entity)
        {
            this.SendPropertyChanging();
            entity.EnglishLevel = this;
        }

        private void detach_Staffs(Staff entity)
        {
            this.SendPropertyChanging();
            entity.EnglishLevel = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Insurance")]
    public partial class Insurance : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private System.Nullable<System.DateTime> _startDate;

        private System.Nullable<System.DateTime> _endDate;

        private System.Nullable<double> _money;

        private System.Nullable<int> _staffId;

        private EntityRef<Staff> _Staff;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void OnstartDateChanging(System.Nullable<System.DateTime> value);
        partial void OnstartDateChanged();
        partial void OnendDateChanging(System.Nullable<System.DateTime> value);
        partial void OnendDateChanged();
        partial void OnmoneyChanging(System.Nullable<double> value);
        partial void OnmoneyChanged();
        partial void OnstaffIdChanging(System.Nullable<int> value);
        partial void OnstaffIdChanged();
        #endregion

        public Insurance()
        {
            this._Staff = default(EntityRef<Staff>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(100)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_startDate", DbType = "Date")]
        public System.Nullable<System.DateTime> startDate
        {
            get
            {
                return this._startDate;
            }
            set
            {
                if ((this._startDate != value))
                {
                    this.OnstartDateChanging(value);
                    this.SendPropertyChanging();
                    this._startDate = value;
                    this.SendPropertyChanged("startDate");
                    this.OnstartDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_endDate", DbType = "Date")]
        public System.Nullable<System.DateTime> endDate
        {
            get
            {
                return this._endDate;
            }
            set
            {
                if ((this._endDate != value))
                {
                    this.OnendDateChanging(value);
                    this.SendPropertyChanging();
                    this._endDate = value;
                    this.SendPropertyChanged("endDate");
                    this.OnendDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_money", DbType = "Float")]
        public System.Nullable<double> money
        {
            get
            {
                return this._money;
            }
            set
            {
                if ((this._money != value))
                {
                    this.OnmoneyChanging(value);
                    this.SendPropertyChanging();
                    this._money = value;
                    this.SendPropertyChanged("money");
                    this.OnmoneyChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_staffId", DbType = "Int")]
        public System.Nullable<int> staffId
        {
            get
            {
                return this._staffId;
            }
            set
            {
                if ((this._staffId != value))
                {
                    if (this._Staff.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnstaffIdChanging(value);
                    this.SendPropertyChanging();
                    this._staffId = value;
                    this.SendPropertyChanged("staffId");
                    this.OnstaffIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Staff_Insurance", Storage = "_Staff", ThisKey = "staffId", OtherKey = "id", IsForeignKey = true)]
        public Staff Staff
        {
            get
            {
                return this._Staff.Entity;
            }
            set
            {
                Staff previousValue = this._Staff.Entity;
                if (((previousValue != value)
                            || (this._Staff.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Staff.Entity = null;
                        previousValue.Insurances.Remove(this);
                    }
                    this._Staff.Entity = value;
                    if ((value != null))
                    {
                        value.Insurances.Add(this);
                        this._staffId = value.id;
                    }
                    else
                    {
                        this._staffId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Staff");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ITLevel")]
    public partial class ITLevel : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private EntitySet<Staff> _Staffs;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        #endregion

        public ITLevel()
        {
            this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(50)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "ITLevel_Staff", Storage = "_Staffs", ThisKey = "id", OtherKey = "itLevelId")]
        public EntitySet<Staff> Staffs
        {
            get
            {
                return this._Staffs;
            }
            set
            {
                this._Staffs.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Staffs(Staff entity)
        {
            this.SendPropertyChanging();
            entity.ITLevel = this;
        }

        private void detach_Staffs(Staff entity)
        {
            this.SendPropertyChanging();
            entity.ITLevel = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.[Level]")]
    public partial class Level : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private EntitySet<Staff> _Staffs;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        #endregion

        public Level()
        {
            this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(100)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Level_Staff", Storage = "_Staffs", ThisKey = "id", OtherKey = "levelId")]
        public EntitySet<Staff> Staffs
        {
            get
            {
                return this._Staffs;
            }
            set
            {
                this._Staffs.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Staffs(Staff entity)
        {
            this.SendPropertyChanging();
            entity.Level = this;
        }

        private void detach_Staffs(Staff entity)
        {
            this.SendPropertyChanging();
            entity.Level = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Position")]
    public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private EntitySet<Staff> _Staffs;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        #endregion

        public Position()
        {
            this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(100)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Position_Staff", Storage = "_Staffs", ThisKey = "id", OtherKey = "positionId")]
        public EntitySet<Staff> Staffs
        {
            get
            {
                return this._Staffs;
            }
            set
            {
                this._Staffs.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Staffs(Staff entity)
        {
            this.SendPropertyChanging();
            entity.Position = this;
        }

        private void detach_Staffs(Staff entity)
        {
            this.SendPropertyChanging();
            entity.Position = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Punish")]
    public partial class Punish : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private System.Nullable<int> _staffId;

        private string _mission;

        private System.Nullable<System.DateTime> _createDate;

        private System.Nullable<int> _regulationPunishId;

        private System.Nullable<double> _money;

        private string _note;

        private EntityRef<RegulationPunish> _RegulationPunish;

        private EntityRef<Staff> _Staff;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnstaffIdChanging(System.Nullable<int> value);
        partial void OnstaffIdChanged();
        partial void OnmissionChanging(string value);
        partial void OnmissionChanged();
        partial void OncreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OncreateDateChanged();
        partial void OnregulationPunishIdChanging(System.Nullable<int> value);
        partial void OnregulationPunishIdChanged();
        partial void OnmoneyChanging(System.Nullable<double> value);
        partial void OnmoneyChanged();
        partial void OnnoteChanging(string value);
        partial void OnnoteChanged();
        #endregion

        public Punish()
        {
            this._RegulationPunish = default(EntityRef<RegulationPunish>);
            this._Staff = default(EntityRef<Staff>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_staffId", DbType = "Int")]
        public System.Nullable<int> staffId
        {
            get
            {
                return this._staffId;
            }
            set
            {
                if ((this._staffId != value))
                {
                    if (this._Staff.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnstaffIdChanging(value);
                    this.SendPropertyChanging();
                    this._staffId = value;
                    this.SendPropertyChanged("staffId");
                    this.OnstaffIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_mission", DbType = "NVarChar(500)")]
        public string mission
        {
            get
            {
                return this._mission;
            }
            set
            {
                if ((this._mission != value))
                {
                    this.OnmissionChanging(value);
                    this.SendPropertyChanging();
                    this._mission = value;
                    this.SendPropertyChanged("mission");
                    this.OnmissionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_createDate", DbType = "Date")]
        public System.Nullable<System.DateTime> createDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                if ((this._createDate != value))
                {
                    this.OncreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._createDate = value;
                    this.SendPropertyChanged("createDate");
                    this.OncreateDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_regulationPunishId", DbType = "Int")]
        public System.Nullable<int> regulationPunishId
        {
            get
            {
                return this._regulationPunishId;
            }
            set
            {
                if ((this._regulationPunishId != value))
                {
                    if (this._RegulationPunish.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnregulationPunishIdChanging(value);
                    this.SendPropertyChanging();
                    this._regulationPunishId = value;
                    this.SendPropertyChanged("regulationPunishId");
                    this.OnregulationPunishIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_money", DbType = "Float")]
        public System.Nullable<double> money
        {
            get
            {
                return this._money;
            }
            set
            {
                if ((this._money != value))
                {
                    this.OnmoneyChanging(value);
                    this.SendPropertyChanging();
                    this._money = value;
                    this.SendPropertyChanged("money");
                    this.OnmoneyChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_note", DbType = "NVarChar(MAX)")]
        public string note
        {
            get
            {
                return this._note;
            }
            set
            {
                if ((this._note != value))
                {
                    this.OnnoteChanging(value);
                    this.SendPropertyChanging();
                    this._note = value;
                    this.SendPropertyChanged("note");
                    this.OnnoteChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RegulationPunish_Punish", Storage = "_RegulationPunish", ThisKey = "regulationPunishId", OtherKey = "id", IsForeignKey = true)]
        public RegulationPunish RegulationPunish
        {
            get
            {
                return this._RegulationPunish.Entity;
            }
            set
            {
                RegulationPunish previousValue = this._RegulationPunish.Entity;
                if (((previousValue != value)
                            || (this._RegulationPunish.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._RegulationPunish.Entity = null;
                        previousValue.Punishes.Remove(this);
                    }
                    this._RegulationPunish.Entity = value;
                    if ((value != null))
                    {
                        value.Punishes.Add(this);
                        this._regulationPunishId = value.id;
                    }
                    else
                    {
                        this._regulationPunishId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("RegulationPunish");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Staff_Punish", Storage = "_Staff", ThisKey = "staffId", OtherKey = "id", IsForeignKey = true)]
        public Staff Staff
        {
            get
            {
                return this._Staff.Entity;
            }
            set
            {
                Staff previousValue = this._Staff.Entity;
                if (((previousValue != value)
                            || (this._Staff.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Staff.Entity = null;
                        previousValue.Punishes.Remove(this);
                    }
                    this._Staff.Entity = value;
                    if ((value != null))
                    {
                        value.Punishes.Add(this);
                        this._staffId = value.id;
                    }
                    else
                    {
                        this._staffId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Staff");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.RegulationPunish")]
    public partial class RegulationPunish : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private System.Nullable<double> _money;

        private EntitySet<Punish> _Punishes;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void OnmoneyChanging(System.Nullable<double> value);
        partial void OnmoneyChanged();
        #endregion

        public RegulationPunish()
        {
            this._Punishes = new EntitySet<Punish>(new Action<Punish>(this.attach_Punishes), new Action<Punish>(this.detach_Punishes));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(50)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_money", DbType = "Float")]
        public System.Nullable<double> money
        {
            get
            {
                return this._money;
            }
            set
            {
                if ((this._money != value))
                {
                    this.OnmoneyChanging(value);
                    this.SendPropertyChanging();
                    this._money = value;
                    this.SendPropertyChanged("money");
                    this.OnmoneyChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RegulationPunish_Punish", Storage = "_Punishes", ThisKey = "id", OtherKey = "regulationPunishId")]
        public EntitySet<Punish> Punishes
        {
            get
            {
                return this._Punishes;
            }
            set
            {
                this._Punishes.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Punishes(Punish entity)
        {
            this.SendPropertyChanging();
            entity.RegulationPunish = this;
        }

        private void detach_Punishes(Punish entity)
        {
            this.SendPropertyChanging();
            entity.RegulationPunish = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.RegulationReward")]
    public partial class RegulationReward : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private System.Nullable<double> _money;

        private EntitySet<Reward> _Rewards;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void OnmoneyChanging(System.Nullable<double> value);
        partial void OnmoneyChanged();
        #endregion

        public RegulationReward()
        {
            this._Rewards = new EntitySet<Reward>(new Action<Reward>(this.attach_Rewards), new Action<Reward>(this.detach_Rewards));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(50)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_money", DbType = "Float")]
        public System.Nullable<double> money
        {
            get
            {
                return this._money;
            }
            set
            {
                if ((this._money != value))
                {
                    this.OnmoneyChanging(value);
                    this.SendPropertyChanging();
                    this._money = value;
                    this.SendPropertyChanged("money");
                    this.OnmoneyChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RegulationReward_Reward", Storage = "_Rewards", ThisKey = "id", OtherKey = "regulationRewardId")]
        public EntitySet<Reward> Rewards
        {
            get
            {
                return this._Rewards;
            }
            set
            {
                this._Rewards.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Rewards(Reward entity)
        {
            this.SendPropertyChanging();
            entity.RegulationReward = this;
        }

        private void detach_Rewards(Reward entity)
        {
            this.SendPropertyChanging();
            entity.RegulationReward = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Reward")]
    public partial class Reward : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private System.Nullable<int> _staffId;

        private string _mission;

        private System.Nullable<System.DateTime> _createDate;

        private System.Nullable<int> _regulationRewardId;

        private System.Nullable<double> _money;

        private string _note;

        private EntityRef<RegulationReward> _RegulationReward;

        private EntityRef<Staff> _Staff;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnstaffIdChanging(System.Nullable<int> value);
        partial void OnstaffIdChanged();
        partial void OnmissionChanging(string value);
        partial void OnmissionChanged();
        partial void OncreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OncreateDateChanged();
        partial void OnregulationRewardIdChanging(System.Nullable<int> value);
        partial void OnregulationRewardIdChanged();
        partial void OnmoneyChanging(System.Nullable<double> value);
        partial void OnmoneyChanged();
        partial void OnnoteChanging(string value);
        partial void OnnoteChanged();
        #endregion

        public Reward()
        {
            this._RegulationReward = default(EntityRef<RegulationReward>);
            this._Staff = default(EntityRef<Staff>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_staffId", DbType = "Int")]
        public System.Nullable<int> staffId
        {
            get
            {
                return this._staffId;
            }
            set
            {
                if ((this._staffId != value))
                {
                    if (this._Staff.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnstaffIdChanging(value);
                    this.SendPropertyChanging();
                    this._staffId = value;
                    this.SendPropertyChanged("staffId");
                    this.OnstaffIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_mission", DbType = "NVarChar(500)")]
        public string mission
        {
            get
            {
                return this._mission;
            }
            set
            {
                if ((this._mission != value))
                {
                    this.OnmissionChanging(value);
                    this.SendPropertyChanging();
                    this._mission = value;
                    this.SendPropertyChanged("mission");
                    this.OnmissionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_createDate", DbType = "Date")]
        public System.Nullable<System.DateTime> createDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                if ((this._createDate != value))
                {
                    this.OncreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._createDate = value;
                    this.SendPropertyChanged("createDate");
                    this.OncreateDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_regulationRewardId", DbType = "Int")]
        public System.Nullable<int> regulationRewardId
        {
            get
            {
                return this._regulationRewardId;
            }
            set
            {
                if ((this._regulationRewardId != value))
                {
                    if (this._RegulationReward.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnregulationRewardIdChanging(value);
                    this.SendPropertyChanging();
                    this._regulationRewardId = value;
                    this.SendPropertyChanged("regulationRewardId");
                    this.OnregulationRewardIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_money", DbType = "Float")]
        public System.Nullable<double> money
        {
            get
            {
                return this._money;
            }
            set
            {
                if ((this._money != value))
                {
                    this.OnmoneyChanging(value);
                    this.SendPropertyChanging();
                    this._money = value;
                    this.SendPropertyChanged("money");
                    this.OnmoneyChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_note", DbType = "NVarChar(MAX)")]
        public string note
        {
            get
            {
                return this._note;
            }
            set
            {
                if ((this._note != value))
                {
                    this.OnnoteChanging(value);
                    this.SendPropertyChanging();
                    this._note = value;
                    this.SendPropertyChanged("note");
                    this.OnnoteChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "RegulationReward_Reward", Storage = "_RegulationReward", ThisKey = "regulationRewardId", OtherKey = "id", IsForeignKey = true)]
        public RegulationReward RegulationReward
        {
            get
            {
                return this._RegulationReward.Entity;
            }
            set
            {
                RegulationReward previousValue = this._RegulationReward.Entity;
                if (((previousValue != value)
                            || (this._RegulationReward.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._RegulationReward.Entity = null;
                        previousValue.Rewards.Remove(this);
                    }
                    this._RegulationReward.Entity = value;
                    if ((value != null))
                    {
                        value.Rewards.Add(this);
                        this._regulationRewardId = value.id;
                    }
                    else
                    {
                        this._regulationRewardId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("RegulationReward");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Staff_Reward", Storage = "_Staff", ThisKey = "staffId", OtherKey = "id", IsForeignKey = true)]
        public Staff Staff
        {
            get
            {
                return this._Staff.Entity;
            }
            set
            {
                Staff previousValue = this._Staff.Entity;
                if (((previousValue != value)
                            || (this._Staff.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Staff.Entity = null;
                        previousValue.Rewards.Remove(this);
                    }
                    this._Staff.Entity = value;
                    if ((value != null))
                    {
                        value.Rewards.Add(this);
                        this._staffId = value.id;
                    }
                    else
                    {
                        this._staffId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Staff");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Role")]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private EntitySet<Account> _Accounts;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        #endregion

        public Role()
        {
            this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(100)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Role_Account", Storage = "_Accounts", ThisKey = "id", OtherKey = "roleId")]
        public EntitySet<Account> Accounts
        {
            get
            {
                return this._Accounts;
            }
            set
            {
                this._Accounts.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Accounts(Account entity)
        {
            this.SendPropertyChanging();
            entity.Role = this;
        }

        private void detach_Accounts(Account entity)
        {
            this.SendPropertyChanging();
            entity.Role = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Salary")]
    public partial class Salary : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;
        public Nullable<double> total
        {
            get
            {
                return basicSalary * numberOfWorkDay + allowance + moneyReward - moneyPunish - moneyInsurance;
            }
        }
        public string monthYear
        {
            get
            {
                return "T." + month + "/" + year;
            }
        }
        private System.Nullable<int> _staffId;

        private System.Nullable<double> _basicSalary;

        private System.Nullable<double> _allowance;

        private System.Nullable<int> _numberOfWorkDay;

        private System.Nullable<double> _moneyReward;

        private System.Nullable<double> _moneyPunish;

        private System.Nullable<System.DateTime> _createDate;

        private System.Nullable<int> _departmentId;

        private System.Nullable<double> _moneyInsurance;

        private System.Nullable<int> _month;

        private System.Nullable<int> _year;

        private EntityRef<Department> _Department;

        private EntityRef<Staff> _Staff;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnstaffIdChanging(System.Nullable<int> value);
        partial void OnstaffIdChanged();
        partial void OnbasicSalaryChanging(System.Nullable<double> value);
        partial void OnbasicSalaryChanged();
        partial void OnallowanceChanging(System.Nullable<double> value);
        partial void OnallowanceChanged();
        partial void OnnumberOfWorkDayChanging(System.Nullable<int> value);
        partial void OnnumberOfWorkDayChanged();
        partial void OnmoneyRewardChanging(System.Nullable<double> value);
        partial void OnmoneyRewardChanged();
        partial void OnmoneyPunishChanging(System.Nullable<double> value);
        partial void OnmoneyPunishChanged();
        partial void OncreateDateChanging(System.Nullable<System.DateTime> value);
        partial void OncreateDateChanged();
        partial void OndepartmentIdChanging(System.Nullable<int> value);
        partial void OndepartmentIdChanged();
        partial void OnmoneyInsuranceChanging(System.Nullable<double> value);
        partial void OnmoneyInsuranceChanged();
        partial void OnmonthChanging(System.Nullable<int> value);
        partial void OnmonthChanged();
        partial void OnyearChanging(System.Nullable<int> value);
        partial void OnyearChanged();
        #endregion

        public Salary()
        {
            this._Department = default(EntityRef<Department>);
            this._Staff = default(EntityRef<Staff>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_staffId", DbType = "Int")]
        public System.Nullable<int> staffId
        {
            get
            {
                return this._staffId;
            }
            set
            {
                if ((this._staffId != value))
                {
                    if (this._Staff.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnstaffIdChanging(value);
                    this.SendPropertyChanging();
                    this._staffId = value;
                    this.SendPropertyChanged("staffId");
                    this.OnstaffIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_basicSalary", DbType = "Float")]
        public System.Nullable<double> basicSalary
        {
            get
            {
                return this._basicSalary;
            }
            set
            {
                if ((this._basicSalary != value))
                {
                    this.OnbasicSalaryChanging(value);
                    this.SendPropertyChanging();
                    this._basicSalary = value;
                    this.SendPropertyChanged("basicSalary");
                    this.OnbasicSalaryChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_allowance", DbType = "Float")]
        public System.Nullable<double> allowance
        {
            get
            {
                return this._allowance;
            }
            set
            {
                if ((this._allowance != value))
                {
                    this.OnallowanceChanging(value);
                    this.SendPropertyChanging();
                    this._allowance = value;
                    this.SendPropertyChanged("allowance");
                    this.OnallowanceChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_numberOfWorkDay", DbType = "Int")]
        public System.Nullable<int> numberOfWorkDay
        {
            get
            {
                return this._numberOfWorkDay;
            }
            set
            {
                if ((this._numberOfWorkDay != value))
                {
                    this.OnnumberOfWorkDayChanging(value);
                    this.SendPropertyChanging();
                    this._numberOfWorkDay = value;
                    this.SendPropertyChanged("numberOfWorkDay");
                    this.OnnumberOfWorkDayChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_moneyReward", DbType = "Float")]
        public System.Nullable<double> moneyReward
        {
            get
            {
                return this._moneyReward;
            }
            set
            {
                if ((this._moneyReward != value))
                {
                    this.OnmoneyRewardChanging(value);
                    this.SendPropertyChanging();
                    this._moneyReward = value;
                    this.SendPropertyChanged("moneyReward");
                    this.OnmoneyRewardChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_moneyPunish", DbType = "Float")]
        public System.Nullable<double> moneyPunish
        {
            get
            {
                return this._moneyPunish;
            }
            set
            {
                if ((this._moneyPunish != value))
                {
                    this.OnmoneyPunishChanging(value);
                    this.SendPropertyChanging();
                    this._moneyPunish = value;
                    this.SendPropertyChanged("moneyPunish");
                    this.OnmoneyPunishChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_createDate", DbType = "Date")]
        public System.Nullable<System.DateTime> createDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                if ((this._createDate != value))
                {
                    this.OncreateDateChanging(value);
                    this.SendPropertyChanging();
                    this._createDate = value;
                    this.SendPropertyChanged("createDate");
                    this.OncreateDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_departmentId", DbType = "Int")]
        public System.Nullable<int> departmentId
        {
            get
            {
                return this._departmentId;
            }
            set
            {
                if ((this._departmentId != value))
                {
                    if (this._Department.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OndepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._departmentId = value;
                    this.SendPropertyChanged("departmentId");
                    this.OndepartmentIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_moneyInsurance", DbType = "Float")]
        public System.Nullable<double> moneyInsurance
        {
            get
            {
                return this._moneyInsurance;
            }
            set
            {
                if ((this._moneyInsurance != value))
                {
                    this.OnmoneyInsuranceChanging(value);
                    this.SendPropertyChanging();
                    this._moneyInsurance = value;
                    this.SendPropertyChanged("moneyInsurance");
                    this.OnmoneyInsuranceChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_month", DbType = "Int")]
        public System.Nullable<int> month
        {
            get
            {
                return this._month;
            }
            set
            {
                if ((this._month != value))
                {
                    this.OnmonthChanging(value);
                    this.SendPropertyChanging();
                    this._month = value;
                    this.SendPropertyChanged("month");
                    this.OnmonthChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_year", DbType = "Int")]
        public System.Nullable<int> year
        {
            get
            {
                return this._year;
            }
            set
            {
                if ((this._year != value))
                {
                    this.OnyearChanging(value);
                    this.SendPropertyChanging();
                    this._year = value;
                    this.SendPropertyChanged("year");
                    this.OnyearChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Department_Salary", Storage = "_Department", ThisKey = "departmentId", OtherKey = "id", IsForeignKey = true)]
        public Department Department
        {
            get
            {
                return this._Department.Entity;
            }
            set
            {
                Department previousValue = this._Department.Entity;
                if (((previousValue != value)
                            || (this._Department.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Department.Entity = null;
                        previousValue.Salaries.Remove(this);
                    }
                    this._Department.Entity = value;
                    if ((value != null))
                    {
                        value.Salaries.Add(this);
                        this._departmentId = value.id;
                    }
                    else
                    {
                        this._departmentId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Department");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Staff_Salary", Storage = "_Staff", ThisKey = "staffId", OtherKey = "id", IsForeignKey = true)]
        public Staff Staff
        {
            get
            {
                return this._Staff.Entity;
            }
            set
            {
                Staff previousValue = this._Staff.Entity;
                if (((previousValue != value)
                            || (this._Staff.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Staff.Entity = null;
                        previousValue.Salaries.Remove(this);
                    }
                    this._Staff.Entity = value;
                    if ((value != null))
                    {
                        value.Salaries.Add(this);
                        this._staffId = value.id;
                    }
                    else
                    {
                        this._staffId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Staff");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Staff")]
    public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private string _image;

        private System.Nullable<System.DateTime> _dateOfBirth;

        private System.Nullable<System.DateTime> _dateOfWork;

        private System.Nullable<bool> _sex;

        private string _phone;

        private string _address;

        private string _identityCard;

        private System.Nullable<int> _positionId;

        private System.Nullable<int> _contractId;

        private System.Nullable<int> _levelId;

        private System.Nullable<int> _departmentId;

        private System.Nullable<bool> _status;

        private System.Nullable<int> _englishLevelId;

        private System.Nullable<int> _itLevelId;

        private EntitySet<Account> _Accounts;

        private EntitySet<Timekeeping> _Timekeepings;

        private EntitySet<Insurance> _Insurances;

        private EntitySet<Punish> _Punishes;

        private EntitySet<Reward> _Rewards;

        private EntitySet<Salary> _Salaries;

        private EntityRef<Contract> _Contract;

        private EntityRef<Department> _Department;

        private EntityRef<EnglishLevel> _EnglishLevel;

        private EntityRef<ITLevel> _ITLevel;

        private EntityRef<Level> _Level;

        private EntityRef<Position> _Position;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void OnimageChanging(string value);
        partial void OnimageChanged();
        partial void OndateOfBirthChanging(System.Nullable<System.DateTime> value);
        partial void OndateOfBirthChanged();
        partial void OndateOfWorkChanging(System.Nullable<System.DateTime> value);
        partial void OndateOfWorkChanged();
        partial void OnsexChanging(System.Nullable<bool> value);
        partial void OnsexChanged();
        partial void OnphoneChanging(string value);
        partial void OnphoneChanged();
        partial void OnaddressChanging(string value);
        partial void OnaddressChanged();
        partial void OnidentityCardChanging(string value);
        partial void OnidentityCardChanged();
        partial void OnpositionIdChanging(System.Nullable<int> value);
        partial void OnpositionIdChanged();
        partial void OncontractIdChanging(System.Nullable<int> value);
        partial void OncontractIdChanged();
        partial void OnlevelIdChanging(System.Nullable<int> value);
        partial void OnlevelIdChanged();
        partial void OndepartmentIdChanging(System.Nullable<int> value);
        partial void OndepartmentIdChanged();
        partial void OnstatusChanging(System.Nullable<bool> value);
        partial void OnstatusChanged();
        partial void OnenglishLevelIdChanging(System.Nullable<int> value);
        partial void OnenglishLevelIdChanged();
        partial void OnitLevelIdChanging(System.Nullable<int> value);
        partial void OnitLevelIdChanged();
        #endregion

        public Staff()
        {
            this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
            this._Timekeepings = new EntitySet<Timekeeping>(new Action<Timekeeping>(this.attach_Timekeepings), new Action<Timekeeping>(this.detach_Timekeepings));
            this._Insurances = new EntitySet<Insurance>(new Action<Insurance>(this.attach_Insurances), new Action<Insurance>(this.detach_Insurances));
            this._Punishes = new EntitySet<Punish>(new Action<Punish>(this.attach_Punishes), new Action<Punish>(this.detach_Punishes));
            this._Rewards = new EntitySet<Reward>(new Action<Reward>(this.attach_Rewards), new Action<Reward>(this.detach_Rewards));
            this._Salaries = new EntitySet<Salary>(new Action<Salary>(this.attach_Salaries), new Action<Salary>(this.detach_Salaries));
            this._Contract = default(EntityRef<Contract>);
            this._Department = default(EntityRef<Department>);
            this._EnglishLevel = default(EntityRef<EnglishLevel>);
            this._ITLevel = default(EntityRef<ITLevel>);
            this._Level = default(EntityRef<Level>);
            this._Position = default(EntityRef<Position>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(100)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_image", DbType = "NVarChar(500)")]
        public string image
        {
            get
            {
                return this._image;
            }
            set
            {
                if ((this._image != value))
                {
                    this.OnimageChanging(value);
                    this.SendPropertyChanging();
                    this._image = value;
                    this.SendPropertyChanged("image");
                    this.OnimageChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_dateOfBirth", DbType = "Date")]
        public System.Nullable<System.DateTime> dateOfBirth
        {
            get
            {
                return this._dateOfBirth;
            }
            set
            {
                if ((this._dateOfBirth != value))
                {
                    this.OndateOfBirthChanging(value);
                    this.SendPropertyChanging();
                    this._dateOfBirth = value;
                    this.SendPropertyChanged("dateOfBirth");
                    this.OndateOfBirthChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_dateOfWork", DbType = "Date")]
        public System.Nullable<System.DateTime> dateOfWork
        {
            get
            {
                return this._dateOfWork;
            }
            set
            {
                if ((this._dateOfWork != value))
                {
                    this.OndateOfWorkChanging(value);
                    this.SendPropertyChanging();
                    this._dateOfWork = value;
                    this.SendPropertyChanged("dateOfWork");
                    this.OndateOfWorkChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_sex", DbType = "Bit")]
        public System.Nullable<bool> sex
        {
            get
            {
                return this._sex;
            }
            set
            {
                if ((this._sex != value))
                {
                    this.OnsexChanging(value);
                    this.SendPropertyChanging();
                    this._sex = value;
                    this.SendPropertyChanged("sex");
                    this.OnsexChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_phone", DbType = "VarChar(11)")]
        public string phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnphoneChanging(value);
                    this.SendPropertyChanging();
                    this._phone = value;
                    this.SendPropertyChanged("phone");
                    this.OnphoneChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_address", DbType = "NVarChar(500)")]
        public string address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnaddressChanging(value);
                    this.SendPropertyChanging();
                    this._address = value;
                    this.SendPropertyChanged("address");
                    this.OnaddressChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_identityCard", DbType = "VarChar(20)")]
        public string identityCard
        {
            get
            {
                return this._identityCard;
            }
            set
            {
                if ((this._identityCard != value))
                {
                    this.OnidentityCardChanging(value);
                    this.SendPropertyChanging();
                    this._identityCard = value;
                    this.SendPropertyChanged("identityCard");
                    this.OnidentityCardChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_positionId", DbType = "Int")]
        public System.Nullable<int> positionId
        {
            get
            {
                return this._positionId;
            }
            set
            {
                if ((this._positionId != value))
                {
                    if (this._Position.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnpositionIdChanging(value);
                    this.SendPropertyChanging();
                    this._positionId = value;
                    this.SendPropertyChanged("positionId");
                    this.OnpositionIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_contractId", DbType = "Int")]
        public System.Nullable<int> contractId
        {
            get
            {
                return this._contractId;
            }
            set
            {
                if ((this._contractId != value))
                {
                    if (this._Contract.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OncontractIdChanging(value);
                    this.SendPropertyChanging();
                    this._contractId = value;
                    this.SendPropertyChanged("contractId");
                    this.OncontractIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_levelId", DbType = "Int")]
        public System.Nullable<int> levelId
        {
            get
            {
                return this._levelId;
            }
            set
            {
                if ((this._levelId != value))
                {
                    if (this._Level.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnlevelIdChanging(value);
                    this.SendPropertyChanging();
                    this._levelId = value;
                    this.SendPropertyChanged("levelId");
                    this.OnlevelIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_departmentId", DbType = "Int")]
        public System.Nullable<int> departmentId
        {
            get
            {
                return this._departmentId;
            }
            set
            {
                if ((this._departmentId != value))
                {
                    if (this._Department.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OndepartmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._departmentId = value;
                    this.SendPropertyChanged("departmentId");
                    this.OndepartmentIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_status", DbType = "Bit")]
        public System.Nullable<bool> status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnstatusChanging(value);
                    this.SendPropertyChanging();
                    this._status = value;
                    this.SendPropertyChanged("status");
                    this.OnstatusChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_englishLevelId", DbType = "Int")]
        public System.Nullable<int> englishLevelId
        {
            get
            {
                return this._englishLevelId;
            }
            set
            {
                if ((this._englishLevelId != value))
                {
                    if (this._EnglishLevel.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnenglishLevelIdChanging(value);
                    this.SendPropertyChanging();
                    this._englishLevelId = value;
                    this.SendPropertyChanged("englishLevelId");
                    this.OnenglishLevelIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_itLevelId", DbType = "Int")]
        public System.Nullable<int> itLevelId
        {
            get
            {
                return this._itLevelId;
            }
            set
            {
                if ((this._itLevelId != value))
                {
                    if (this._ITLevel.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnitLevelIdChanging(value);
                    this.SendPropertyChanging();
                    this._itLevelId = value;
                    this.SendPropertyChanged("itLevelId");
                    this.OnitLevelIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Staff_Account", Storage = "_Accounts", ThisKey = "id", OtherKey = "staffId")]
        public EntitySet<Account> Accounts
        {
            get
            {
                return this._Accounts;
            }
            set
            {
                this._Accounts.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Staff_Timekeeping", Storage = "_Timekeepings", ThisKey = "id", OtherKey = "staffId")]
        public EntitySet<Timekeeping> Timekeepings
        {
            get
            {
                return this._Timekeepings;
            }
            set
            {
                this._Timekeepings.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Staff_Insurance", Storage = "_Insurances", ThisKey = "id", OtherKey = "staffId")]
        public EntitySet<Insurance> Insurances
        {
            get
            {
                return this._Insurances;
            }
            set
            {
                this._Insurances.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Staff_Punish", Storage = "_Punishes", ThisKey = "id", OtherKey = "staffId")]
        public EntitySet<Punish> Punishes
        {
            get
            {
                return this._Punishes;
            }
            set
            {
                this._Punishes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Staff_Reward", Storage = "_Rewards", ThisKey = "id", OtherKey = "staffId")]
        public EntitySet<Reward> Rewards
        {
            get
            {
                return this._Rewards;
            }
            set
            {
                this._Rewards.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Staff_Salary", Storage = "_Salaries", ThisKey = "id", OtherKey = "staffId")]
        public EntitySet<Salary> Salaries
        {
            get
            {
                return this._Salaries;
            }
            set
            {
                this._Salaries.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Contract_Staff", Storage = "_Contract", ThisKey = "contractId", OtherKey = "id", IsForeignKey = true)]
        public Contract Contract
        {
            get
            {
                return this._Contract.Entity;
            }
            set
            {
                Contract previousValue = this._Contract.Entity;
                if (((previousValue != value)
                            || (this._Contract.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Contract.Entity = null;
                        previousValue.Staffs.Remove(this);
                    }
                    this._Contract.Entity = value;
                    if ((value != null))
                    {
                        value.Staffs.Add(this);
                        this._contractId = value.id;
                    }
                    else
                    {
                        this._contractId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Contract");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Department_Staff", Storage = "_Department", ThisKey = "departmentId", OtherKey = "id", IsForeignKey = true)]
        public Department Department
        {
            get
            {
                return this._Department.Entity;
            }
            set
            {
                Department previousValue = this._Department.Entity;
                if (((previousValue != value)
                            || (this._Department.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Department.Entity = null;
                        previousValue.Staffs.Remove(this);
                    }
                    this._Department.Entity = value;
                    if ((value != null))
                    {
                        value.Staffs.Add(this);
                        this._departmentId = value.id;
                    }
                    else
                    {
                        this._departmentId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Department");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "EnglishLevel_Staff", Storage = "_EnglishLevel", ThisKey = "englishLevelId", OtherKey = "id", IsForeignKey = true)]
        public EnglishLevel EnglishLevel
        {
            get
            {
                return this._EnglishLevel.Entity;
            }
            set
            {
                EnglishLevel previousValue = this._EnglishLevel.Entity;
                if (((previousValue != value)
                            || (this._EnglishLevel.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._EnglishLevel.Entity = null;
                        previousValue.Staffs.Remove(this);
                    }
                    this._EnglishLevel.Entity = value;
                    if ((value != null))
                    {
                        value.Staffs.Add(this);
                        this._englishLevelId = value.id;
                    }
                    else
                    {
                        this._englishLevelId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("EnglishLevel");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "ITLevel_Staff", Storage = "_ITLevel", ThisKey = "itLevelId", OtherKey = "id", IsForeignKey = true)]
        public ITLevel ITLevel
        {
            get
            {
                return this._ITLevel.Entity;
            }
            set
            {
                ITLevel previousValue = this._ITLevel.Entity;
                if (((previousValue != value)
                            || (this._ITLevel.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._ITLevel.Entity = null;
                        previousValue.Staffs.Remove(this);
                    }
                    this._ITLevel.Entity = value;
                    if ((value != null))
                    {
                        value.Staffs.Add(this);
                        this._itLevelId = value.id;
                    }
                    else
                    {
                        this._itLevelId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("ITLevel");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Level_Staff", Storage = "_Level", ThisKey = "levelId", OtherKey = "id", IsForeignKey = true)]
        public Level Level
        {
            get
            {
                return this._Level.Entity;
            }
            set
            {
                Level previousValue = this._Level.Entity;
                if (((previousValue != value)
                            || (this._Level.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Level.Entity = null;
                        previousValue.Staffs.Remove(this);
                    }
                    this._Level.Entity = value;
                    if ((value != null))
                    {
                        value.Staffs.Add(this);
                        this._levelId = value.id;
                    }
                    else
                    {
                        this._levelId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Level");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Position_Staff", Storage = "_Position", ThisKey = "positionId", OtherKey = "id", IsForeignKey = true)]
        public Position Position
        {
            get
            {
                return this._Position.Entity;
            }
            set
            {
                Position previousValue = this._Position.Entity;
                if (((previousValue != value)
                            || (this._Position.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Position.Entity = null;
                        previousValue.Staffs.Remove(this);
                    }
                    this._Position.Entity = value;
                    if ((value != null))
                    {
                        value.Staffs.Add(this);
                        this._positionId = value.id;
                    }
                    else
                    {
                        this._positionId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Position");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Accounts(Account entity)
        {
            this.SendPropertyChanging();
            entity.Staff = this;
        }

        private void detach_Accounts(Account entity)
        {
            this.SendPropertyChanging();
            entity.Staff = null;
        }

        private void attach_Timekeepings(Timekeeping entity)
        {
            this.SendPropertyChanging();
            entity.Staff = this;
        }

        private void detach_Timekeepings(Timekeeping entity)
        {
            this.SendPropertyChanging();
            entity.Staff = null;
        }

        private void attach_Insurances(Insurance entity)
        {
            this.SendPropertyChanging();
            entity.Staff = this;
        }

        private void detach_Insurances(Insurance entity)
        {
            this.SendPropertyChanging();
            entity.Staff = null;
        }

        private void attach_Punishes(Punish entity)
        {
            this.SendPropertyChanging();
            entity.Staff = this;
        }

        private void detach_Punishes(Punish entity)
        {
            this.SendPropertyChanging();
            entity.Staff = null;
        }

        private void attach_Rewards(Reward entity)
        {
            this.SendPropertyChanging();
            entity.Staff = this;
        }

        private void detach_Rewards(Reward entity)
        {
            this.SendPropertyChanging();
            entity.Staff = null;
        }

        private void attach_Salaries(Salary entity)
        {
            this.SendPropertyChanging();
            entity.Staff = this;
        }

        private void detach_Salaries(Salary entity)
        {
            this.SendPropertyChanging();
            entity.Staff = null;
        }
    }
}
#pragma warning restore 1591
